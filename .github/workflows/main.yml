name: Deploy React App

on:
  workflow_dispatch: {}
  pull_request:
    branches:
      - deploy

jobs:
  export-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      artifact_url: ${{ steps.generate_artifact.outputs.artifact_url }}
    steps:
      - name: üì• Checkout del c√≥digo
        uses: actions/checkout@v3

      - name: üì¶ Instalar dependencias
        run: npm install

      - name: üìÑ Crear archivo .env desde los secretos
        run: |
          echo "REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}" >> .env
          echo "REACT_APP_MEDIA_BASE_URL=${{ secrets.REACT_APP_MEDIA_BASE_URL }}" >> .env

      - name: ‚öôÔ∏è Construir la aplicaci√≥n
        run: CI=false npm run build
        
      - name: üîç Verificar si la carpeta build existe
        run: ls -la

      - name: üóúÔ∏è Comprimir el build
        run: |
          cd build
          zip -r ../build.zip .

      - name: Validate build.zip
        run: |
          echo "Listing contents of build directory:"
          ls -la build
          echo "Checking build.zip:"
          ls -la build.zip || echo "build.zip not found!"

      - name: üì§ Guardar el ZIP como artefacto
        uses: actions/upload-artifact@v4
        id: upload_artifact
        with:
          name: react-build
          path: build.zip

      - name: Generate Artifact URL
        id: generate_artifact
        run: |
          echo "::set-output name=artifact_url::https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ steps.upload_artifact.outputs.artifact-id }}/zip"

  deploy:
    runs-on: ubuntu-latest
    environment: dev
    needs: export-and-deploy
    steps:

      - name: üì• Descargar el artefacto
        uses: actions/download-artifact@v4
        with:
          name: react-build
          path: .

      - name: üöÄ Subir al servidor por SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "build.zip"
          target: "/home/${{ secrets.SSH_USER }}"

      - name: üîß Conectar por SSH y desplegar
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            APP_DIR="${HOME}/${{ secrets.APP_DIR }}"
            ARTIFACT_URL="${{ needs.export-and-deploy.outputs.artifact_url }}"
            TEMP_ZIP="$APP_DIR/Export.zip"

            # Limpiar el directorio si existe
            if [ -d "$APP_DIR" ]; then
              echo "Cleaning APP_DIR..."
              rm -rf "${APP_DIR:?}/*"
            else
              echo "Creating APP_DIR..."
              mkdir -p "$APP_DIR"
            fi

            # Descargar el archivo ZIP
            echo "Downloading artifact..."
            curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "$ARTIFACT_URL" -o "$TEMP_ZIP"

            # Verificar el contenido del ZIP descargado
            echo "Checking ZIP contents..."
            unzip -l "$TEMP_ZIP"

            # Comprobar si la descarga fue exitosa
            if [ $? -ne 0 ]; then
              echo "Failed to download artifact."
              exit 1
            fi

            # Descomprimir el archivo en APP_DIR
            echo "Extracting ZIP..."
            unzip -o "$TEMP_ZIP" -d "$APP_DIR"

            # Eliminar el ZIP para evitar conflictos futuros
            echo "Deleting ZIP..."
            rm -f "$TEMP_ZIP"

            # Descomprimir el archivo en APP_DIR
            echo "Extracting ZIP..."
            unzip -o "$APP_DIR/build.zip" -d "$APP_DIR"

            # Eliminar el ZIP para evitar conflictos futuros
            echo "Deleting ZIP..."
            rm -f "$APP_DIR/build.zip"
            
            echo "Deployment finished!"